{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/EnriqueSalazar/Desktop/Dapp-Enrique/MFTtoken/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst BaseFilter = require('./base-filter');\n\nconst getBlocksForRange = require('./getBlocksForRange');\n\nconst {\n  incrementHexInt\n} = require('./hexUtils');\n\nclass BlockFilter extends BaseFilter {\n  constructor({\n    provider,\n    params\n  }) {\n    super();\n    this.type = 'block';\n    this.provider = provider;\n  }\n\n  update({\n    oldBlock,\n    newBlock\n  }) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const toBlock = newBlock;\n      const fromBlock = incrementHexInt(oldBlock);\n      const blockBodies = yield getBlocksForRange({\n        provider: _this.provider,\n        fromBlock,\n        toBlock\n      });\n      const blockHashes = blockBodies.map(block => block.hash);\n\n      _this.addResults(blockHashes);\n    })();\n  }\n\n}\n\nmodule.exports = BlockFilter;","map":{"version":3,"sources":["C:/Users/EnriqueSalazar/Desktop/Dapp-Enrique/MFTtoken/node_modules/eth-json-rpc-filters/block-filter.js"],"names":["BaseFilter","require","getBlocksForRange","incrementHexInt","BlockFilter","constructor","provider","params","type","update","oldBlock","newBlock","toBlock","fromBlock","blockBodies","blockHashes","map","block","hash","addResults","module","exports"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAsBF,OAAO,CAAC,YAAD,CAAnC;;AAEA,MAAMG,WAAN,SAA0BJ,UAA1B,CAAqC;AAEnCK,EAAAA,WAAW,CAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAF,EAAwB;AACjC;AACA,SAAKC,IAAL,GAAY,OAAZ;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACD;;AAEKG,EAAAA,MAAM,CAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAF,EAA0B;AAAA;;AAAA;AACpC,YAAMC,OAAO,GAAGD,QAAhB;AACA,YAAME,SAAS,GAAGV,eAAe,CAACO,QAAD,CAAjC;AACA,YAAMI,WAAW,SAASZ,iBAAiB,CAAC;AAAEI,QAAAA,QAAQ,EAAE,KAAI,CAACA,QAAjB;AAA2BO,QAAAA,SAA3B;AAAsCD,QAAAA;AAAtC,OAAD,CAA3C;AACA,YAAMG,WAAW,GAAGD,WAAW,CAACE,GAAZ,CAAiBC,KAAD,IAAWA,KAAK,CAACC,IAAjC,CAApB;;AACA,MAAA,KAAI,CAACC,UAAL,CAAgBJ,WAAhB;AALoC;AAMrC;;AAdkC;;AAkBrCK,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass BlockFilter extends BaseFilter {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'block'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    const toBlock = newBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockHashes = blockBodies.map((block) => block.hash)\n    this.addResults(blockHashes)\n  }\n\n}\n\nmodule.exports = BlockFilter\n"]},"metadata":{},"sourceType":"script"}