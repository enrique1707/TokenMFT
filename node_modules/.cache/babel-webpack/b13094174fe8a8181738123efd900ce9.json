{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/EnriqueSalazar/Desktop/Dapp-Alexis/fcctoken/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst Mutex = require('async-mutex').Mutex;\n\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\n\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nconst LogFilter = require('./log-filter.js');\n\nconst BlockFilter = require('./block-filter.js');\n\nconst TxFilter = require('./tx-filter.js');\n\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\n\nmodule.exports = createEthFilterMiddleware;\n\nfunction createEthFilterMiddleware({\n  blockTracker,\n  provider\n}) {\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {}; // create update mutex\n\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  }); // setup filter updating and destroy handler\n\n  const filterUpdater = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* ({\n      oldBlock,\n      newBlock\n    }) {\n      if (filters.length === 0) return; // lock update reads\n\n      const releaseLock = yield mutex.acquire();\n\n      try {\n        // process all filters in parallel\n        yield Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (filter) {\n            try {\n              yield filter.update({\n                oldBlock,\n                newBlock\n              });\n            } catch (err) {\n              // handle each error individually so filter update errors don't affect other filters\n              console.error(err);\n            }\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }()));\n      } catch (err) {\n        // log error so we don't skip the releaseLock\n        console.error(err);\n      } // unlock update reads\n\n\n      releaseLock();\n    });\n\n    return function filterUpdater(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // expose filter methods directly\n\n\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup\n\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n\n  return middleware; //\n  // new filters\n  //\n\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator(function* (params) {\n      const filter = new LogFilter({\n        provider,\n        params\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator(function* () {\n      const filter = new BlockFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n\n\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator(function* () {\n      const filter = new TxFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n\n      if (!filter) {\n        throw new Error(`No filter for index \"${filterIndex}\"`);\n      }\n\n      const results = filter.getChangesAndClear();\n      return results;\n    });\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n\n\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n\n      if (!filter) {\n        throw new Error(`No filter for index \"${filterIndex}\"`);\n      } // only return results for log filters\n\n\n      if (filter.type === 'log') {\n        results = filter.getAllResults();\n      } else {\n        results = [];\n      }\n\n      return results;\n    });\n    return _getFilterLogs.apply(this, arguments);\n  }\n\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n\n\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator(function* (filterIndexHex) {\n      // check filter exists\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      const result = Boolean(filter); // uninstall filter\n\n      if (result) {\n        yield uninstallFilter(filterIndex);\n      }\n\n      return result;\n    });\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n\n  function _installFilter() {\n    _installFilter = _asyncToGenerator(function* (filter) {\n      const prevFilterCount = objValues(filters).length; // install filter\n\n      const currentBlock = yield blockTracker.getLatestBlock();\n      yield filter.initialize({\n        currentBlock\n      });\n      filterIndex++;\n      filters[filterIndex] = filter;\n      filter.id = filterIndex;\n      filter.idHex = intToHex(filterIndex); // update block tracker subs\n\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n      return filterIndex;\n    });\n    return _installFilter.apply(this, arguments);\n  }\n\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator(function* (filterIndex) {\n      const prevFilterCount = objValues(filters).length;\n      delete filters[filterIndex]; // update block tracker subs\n\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n    });\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator(function* () {\n      const prevFilterCount = objValues(filters).length;\n      filters = {}; // update block tracker subs\n\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount: 0\n      });\n    });\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function updateBlockTrackerSubs({\n    prevFilterCount,\n    newFilterCount\n  }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    } // unsubscribe\n\n\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n} // helper for turning filter constructors into rpc middleware\n\n\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (...args) {\n      const filter = yield createFilterFn(...args);\n      const result = intToHex(filter.id);\n      return result;\n    });\n\n    return function () {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n} // helper for pulling out req.params and setting res.result\n\n\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator(function* (req, res) {\n      const result = yield asyncFn.apply(null, req.params);\n      res.result = result;\n    });\n\n    return function (_x9, _x10) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n}\n\nfunction mutexMiddlewareWrapper({\n  mutex\n}) {\n  return middleware => {\n    return /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (req, res, next, end) {\n        // wait for mutex available\n        // we can release immediately because\n        // we just need to make sure updates aren't active\n        const releaseLock = yield mutex.acquire();\n        releaseLock();\n        middleware(req, res, next, end);\n      });\n\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n  };\n}\n\nfunction objValues(obj, fn) {\n  const values = [];\n\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n\n  return values;\n}","map":{"version":3,"sources":["C:/Users/EnriqueSalazar/Desktop/Dapp-Alexis/fcctoken/node_modules/eth-json-rpc-filters/index.js"],"names":["Mutex","require","createAsyncMiddleware","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","oldBlock","newBlock","length","releaseLock","acquire","Promise","all","objValues","map","filter","update","err","console","error","uninstallFilter","destroy","uninstallAllFilters","params","installFilter","filterIndexHex","Error","results","getChangesAndClear","type","getAllResults","result","Boolean","prevFilterCount","currentBlock","getLatestBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","on","removeListener","createFilterFn","args","asyncFn","req","res","apply","next","end","obj","fn","values","key","push"],"mappings":"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","sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"]},"metadata":{},"sourceType":"script"}